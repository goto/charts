
app:
  labels:
    component: service
    application: optimus
    environment: production
  selectorLabels:
    app: optimus

deployment:
  replica: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate

image:
  repository: gotocompany/optimus
  tag: "0.11.1"
  pullPolicy: Always

container:
  volumeMounts: []
  securityContext:
    runAsUser: 1000
  ports:
    - name: http
      containerPort: 9100
      protocol: TCP
    - name: grpc
      containerPort: 9101
      protocol: TCP
  command:
    - optimus
  args:
    - serve
    - -c
    - /etc/optimus/config.yaml
  livenessProbe:
    httpGet:
      path: /ping
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ping
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1

# serve.host field in configYaml breaks the live-ness probe
configYaml: |-
  version: 1
  log:
    level: DEBUG
  serve:
    port: 9100
    port_grpc: 9101
    ingress_host: optimus.optimus.svc.cluster.local
    ingress_host_grpc: optimus.grpc.optimus.svc.cluster.local
    deployer:
      num_workers: 2
  scheduler:
    name: airflow2
  telemetry:
    profile_addr: ":9110"
    jaeger_addr: "http://jaeger-collector:14268/api/traces"

config:
  OPTIMUS_TELEMETRY_JAEGER_ADDR: http://jaeger-collector.optimus:14268/api/traces

secretConfig: {}

cleanupConfig:
  enabled: true
  schedule: "0 0 1 * *" # Runs At 00:00 on day-of-month 1
  image: "postgres:15.2-alpine3.17"
  restartPolicy: OnFailure
  concurrencyPolicy: Forbid
  queries:
    - "delete from sensor_run where start_time < now() - Interval '5 months';"
    - "delete from task_run   where start_time < now() - Interval '5 months';"
    - "delete from hook_run   where start_time < now() - Interval '5 months';"
    - "delete from job_run    where start_time < now() - Interval '5 months';"

service:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 8081
      name: grpc
      targetPort: grpc
      protocol: TCP
  annotations:
    projectcontour.io/upstream-protocol.h2c: grpc

ingress:
  enabled: false
  className: ""
  annotations:
    kubernetes.io/ingress.class: contour
    projectcontour.io/response-timeout: infinity
  hosts:
    - host: optimus.example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: optimus
              port:
                number: 80
  additionalIngress:
  - name: grpc
    className: ""
    annotations: {}
    hosts:
      - host: optimus-grpc.example.com
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: optimus
                port:
                  number: 9101

telegraf:
  enabled: false
  image: telegraf:alpine
  command:
    - telegraf
  args:
    - --config
    - /etc/telegraf/telegraf.conf
  containerPort: 8125
  protocol: UDP

# The default empty values
podSecurityContext: {}
resources: {}
podAnnotations: {}
imagePullSecrets: []
securityContext: {}
nodeSelector: {}
affinity: {}
tolerations: []
