replicaCount: 1
podAnnotations: {}
labels: {}
## String to fully override metabase.fullname template
##
# fullnameOverride:
initContainers: {}
volumes: {}

metabase:
  image:
    repository: metabase/metabase
    tag: v0.50.10
    pullPolicy: IfNotPresent

  # Config Jetty web server
  listen:
    host: "0.0.0.0"
    port: 3000
  ssl:
    # If you have an ssl certificate and would prefer to have Metabase run over HTTPS
    enabled: false
    # port: 8443
    # keyStore: |-
    #   << JKS KEY STORE >>
    # keyStorePassword: storepass
  jetty:
  #  maxThreads: 254
  #  minThreads: 8
  #  maxQueued: -1
  #  maxIdleTime: 60000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  
  # volumeMounts:
  #   - mountPath: /data/config.yaml
  #     name: config
  #     subPath: config.yaml

  # Backend database
  database:
    # Database type (h2 / mysql / postgres), default: postgres
    type: postgres
    # encryptionKey: << YOUR ENCRYPTION KEY >>
    ## Only need when you use mysql / postgres
    host: localhost
    port: 5432
    dbname: db_name
    username: db_username
    password: db_password
    ## Alternatively, use a connection URI for full configurability. Example for SSL enabled Postgres.
    # connectionURI: postgres://user:password@host:port/database?ssl=true&sslmode=require&sslfactory=org.postgresql.ssl.NonValidatingFactory"
    ## If a secret with the database credentials already exists, use the following values:
    # existingSecret:
    # existingSecretUsernameKey:
    # existingSecretPasswordKey:
    # existingSecretConnectionURIKey:

  password:
    # Changing Metabase password complexity:
    # weak: no character constraints
    # normal: at least 1 digit (default)
    # strong: minimum 8 characters w/ 2 lowercase, 2 uppercase, 1 digit, and 1 special character
    complexity: weak
    length: 6

  # secretConfig:
  #   newRelicAppName:  metabase
  #   newRelicLicenseKey: xxx-xxx-xxx

  timeZone: UTC
  emojiLogging: true
  # javaOpts:
  # pluginsDirectory:
  # siteUrl:

  livenessProbe:
    path: /api/health
    initialDelaySeconds: 120
    timeoutSeconds: 30
    failureThreshold: 6

  readinessProbe:
    path: /api/health
    initialDelaySeconds: 30
    timeoutSeconds: 3
    periodSeconds: 5

telegraf:
  image:
    repository: telegraf
    tag: 1.19.3-alpine
    pullPolicy: IfNotPresent
  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 30Mi
    # requests:
    #   cpu: 10m
    #   memory: 30Mi
  # influx:
  #   address: localhost:8086
  #   databaseName: influx-database
  # prometheusRemoteWrite:
  #   url: http://remote/api/push

service:
  type: ClusterIP
  # loadBalancerSourceRanges:
  externalPort: 80
  internalPort: 3000
  # Used to fix NodePort when service.type: NodePort.
  nodePort:
  annotations: {}
    # Used to add custom annotations to the Service.
    # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"

ingress:
  enabled: true
  ingressClassName: contour
  # Used to create Ingress record (should used with service.type: ClusterIP).
  hosts:
    # - metabase.domain.com
  # The ingress path. Useful to host metabase on a subpath, such as `/metabase`.
  path: /
  labels:
    # Used to add custom labels to the Ingress
    # Useful if for example you have multiple Ingress controllers and want your Ingress controllers to bind to specific Ingresses
    # traffic: internal
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: metabase-tls
    #   hosts:
    #     - metabase.domain.com

# A custom log4j.properties file can be provided using a multiline YAML string.
# See https://github.com/metabase/metabase/blob/master/resources/log4j.properties
#
# log4jProperties:

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
